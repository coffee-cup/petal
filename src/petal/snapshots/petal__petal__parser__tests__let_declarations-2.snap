---
source: src/petal/parser.rs
expression: "parse_stmt(\"let a = b + c * d\")"
---
(
    [
        Identifier {
            name: "a",
            span: Span {
                start: Pos(
                    4,
                ),
                end: Some(
                    Pos(
                        4,
                    ),
                ),
            },
            symbol_id: None,
        },
        Identifier {
            name: "b",
            span: Span {
                start: Pos(
                    8,
                ),
                end: Some(
                    Pos(
                        8,
                    ),
                ),
            },
            symbol_id: None,
        },
        Identifier {
            name: "c",
            span: Span {
                start: Pos(
                    12,
                ),
                end: Some(
                    Pos(
                        12,
                    ),
                ),
            },
            symbol_id: None,
        },
        Identifier {
            name: "d",
            span: Span {
                start: Pos(
                    16,
                ),
                end: Some(
                    Pos(
                        16,
                    ),
                ),
            },
            symbol_id: None,
        },
    ],
    [
        ExprNode {
            expr: Ident(
                IdentId(
                    2v1,
                ),
            ),
            span: Span {
                start: Pos(
                    8,
                ),
                end: Some(
                    Pos(
                        8,
                    ),
                ),
            },
        },
        ExprNode {
            expr: Ident(
                IdentId(
                    3v1,
                ),
            ),
            span: Span {
                start: Pos(
                    12,
                ),
                end: Some(
                    Pos(
                        12,
                    ),
                ),
            },
        },
        ExprNode {
            expr: Ident(
                IdentId(
                    4v1,
                ),
            ),
            span: Span {
                start: Pos(
                    16,
                ),
                end: Some(
                    Pos(
                        16,
                    ),
                ),
            },
        },
        ExprNode {
            expr: BinaryOp {
                op: BinaryOp {
                    binary_type: Multiply,
                    span: Span {
                        start: Pos(
                            14,
                        ),
                        end: Some(
                            Pos(
                                14,
                            ),
                        ),
                    },
                },
                left: ExprId(
                    2v1,
                ),
                right: ExprId(
                    3v1,
                ),
            },
            span: Span {
                start: Pos(
                    12,
                ),
                end: Some(
                    Pos(
                        16,
                    ),
                ),
            },
        },
        ExprNode {
            expr: BinaryOp {
                op: BinaryOp {
                    binary_type: Add,
                    span: Span {
                        start: Pos(
                            10,
                        ),
                        end: Some(
                            Pos(
                                10,
                            ),
                        ),
                    },
                },
                left: ExprId(
                    1v1,
                ),
                right: ExprId(
                    4v1,
                ),
            },
            span: Span {
                start: Pos(
                    8,
                ),
                end: Some(
                    Pos(
                        16,
                    ),
                ),
            },
        },
    ],
    [
        StmtNode {
            stmt: Let(
                LetDecl {
                    ident: IdentId(
                        1v1,
                    ),
                    ty: None,
                    init: ExprId(
                        5v1,
                    ),
                },
            ),
            span: Span {
                start: Pos(
                    0,
                ),
                end: Some(
                    Pos(
                        16,
                    ),
                ),
            },
        },
    ],
    [],
)
