---
source: src/petal/parser.rs
expression: "parse(\"a + b ? c * d : e / f\")"
---
Conditional {
    condition: BinaryOp {
        left: Ident {
            name: "a",
            span: Span {
                start: Pos {
                    line: 0,
                    col: 1,
                },
                end: Pos {
                    line: 0,
                    col: 1,
                },
            },
        },
        op: Token {
            token_type: Plus,
            lexeme: "+",
            literal: None,
            span: Span {
                start: Pos {
                    line: 0,
                    col: 3,
                },
                end: Pos {
                    line: 0,
                    col: 3,
                },
            },
        },
        right: Ident {
            name: "b",
            span: Span {
                start: Pos {
                    line: 0,
                    col: 5,
                },
                end: Pos {
                    line: 0,
                    col: 5,
                },
            },
        },
        span: Span {
            start: Pos {
                line: 0,
                col: 1,
            },
            end: Pos {
                line: 0,
                col: 5,
            },
        },
    },
    then_branch: BinaryOp {
        left: Ident {
            name: "c",
            span: Span {
                start: Pos {
                    line: 0,
                    col: 9,
                },
                end: Pos {
                    line: 0,
                    col: 9,
                },
            },
        },
        op: Token {
            token_type: Star,
            lexeme: "*",
            literal: None,
            span: Span {
                start: Pos {
                    line: 0,
                    col: 11,
                },
                end: Pos {
                    line: 0,
                    col: 11,
                },
            },
        },
        right: Ident {
            name: "d",
            span: Span {
                start: Pos {
                    line: 0,
                    col: 13,
                },
                end: Pos {
                    line: 0,
                    col: 13,
                },
            },
        },
        span: Span {
            start: Pos {
                line: 0,
                col: 9,
            },
            end: Pos {
                line: 0,
                col: 13,
            },
        },
    },
    else_branch: BinaryOp {
        left: Ident {
            name: "e",
            span: Span {
                start: Pos {
                    line: 0,
                    col: 17,
                },
                end: Pos {
                    line: 0,
                    col: 17,
                },
            },
        },
        op: Token {
            token_type: Slash,
            lexeme: "/",
            literal: None,
            span: Span {
                start: Pos {
                    line: 0,
                    col: 19,
                },
                end: Pos {
                    line: 0,
                    col: 19,
                },
            },
        },
        right: Ident {
            name: "f",
            span: Span {
                start: Pos {
                    line: 0,
                    col: 21,
                },
                end: Pos {
                    line: 0,
                    col: 21,
                },
            },
        },
        span: Span {
            start: Pos {
                line: 0,
                col: 17,
            },
            end: Pos {
                line: 0,
                col: 21,
            },
        },
    },
    span: Span {
        start: Pos {
            line: 0,
            col: 1,
        },
        end: Pos {
            line: 0,
            col: 21,
        },
    },
}
